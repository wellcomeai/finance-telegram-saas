"""
Photo handler
"""

import logging
import os
import tempfile
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from telegram_bot.config import BotMessages
from telegram_bot.keyboards import transaction_confirmation_keyboard
from ai.image_processor import process_receipt_image, download_photo_file
from telegram_bot.handlers.text_handler import TransactionStates
from datetime import datetime

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.photo)
async def handle_photo_message(message: Message, state: FSMContext, db_user):
    """
    Handle photo messages from user (receipts)
    –ß–µ–∫–∏ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    processing_msg = await message.answer(BotMessages.PROCESSING)
    
    temp_file = None
    temp_path = None
    
    try:
        # Get the largest photo (best quality)
        photo = message.photo[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ = –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        
        logger.info(
            f"Photo from user {db_user.id}, "
            f"size: {photo.width}x{photo.height}, "
            f"file_size: {photo.file_size} bytes"
        )
        
        # Create temp file for photo
        temp_file = tempfile.NamedTemporaryFile(
            suffix='.jpg',
            delete=False,
            dir='/tmp'
        )
        temp_path = temp_file.name
        temp_file.close()
        
        # Download photo
        success = await download_photo_file(
            bot=message.bot,
            file_id=photo.file_id,
            destination=temp_path
        )
        
        if not success:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
            return
        
        # Process receipt image with Vision AI
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Optional[Dict] - –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_data = await process_receipt_image(temp_path)
        
        if transaction_data is None:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —á—ë—Ç—á–µ\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —á–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ\n"
                "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"
            )
            return
        
        # ========== –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ==========
        # –î–ª—è —á–µ–∫–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        # —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        
        # Save to state
        await state.set_state(TransactionStates.waiting_confirmation)
        await state.update_data(
            transaction=transaction_data,
            user_id=db_user.id
        )
        
        # Show confirmation
        type_emoji = "üí∏"  # –ß–µ–∫–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ö–æ–¥—ã
        type_name = "–†–∞—Å—Ö–æ–¥"
        
        confirmation_text = BotMessages.TRANSACTION_CONFIRM.format(
            type_emoji=type_emoji,
            type_name=type_name,
            amount=f"{transaction_data['amount']:,.2f}".replace(",", " "),
            category_icon=transaction_data['category_icon'],
            category_name=transaction_data['category_name'],
            description=transaction_data['description'],
            date=transaction_data['date'].strftime('%d.%m.%Y') if hasattr(transaction_data['date'], 'strftime') else str(transaction_data['date'])
        )
        
        await processing_msg.edit_text(
            confirmation_text,
            reply_markup=transaction_confirmation_keyboard()
        )
        
        logger.info(
            f"Receipt processed for user {db_user.id}: "
            f"{transaction_data['amount']} ‚ÇΩ - {transaction_data['description']}"
        )
        
    except Exception as e:
        logger.error(f"Error handling photo message: {e}", exc_info=True)
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF —á–µ–∫–∞\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º"
        )
    
    finally:
        # Cleanup temp file
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
                logger.info(f"Temp photo file deleted: {temp_path}")
            except Exception as e:
                logger.error(f"Error deleting temp photo file: {e}")
