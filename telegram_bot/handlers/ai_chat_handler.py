"""
AI Chat Handler for Telegram Bot
Handles AI assistant conversations with text, voice, photos, and PDFs
Sends ALL user transactions to AI for complete financial context
"""

import logging
import os
import tempfile
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from datetime import datetime

from telegram_bot.config import BotMessages
from telegram_bot.keyboards import ai_chat_keyboard, ai_end_keyboard
from ai.agent import chat_with_agent, reset_agent_conversation
from ai.voice_transcriber import transcribe_voice, download_voice_file
from ai.image_processor import process_receipt_image, download_photo_file
from ai.pdf_processor import process_receipt_pdf, download_document_file
from database.connection import get_db_connection
from database.repositories.transaction_repo import TransactionRepository

logger = logging.getLogger(__name__)
router = Router()


class AIChatStates(StatesGroup):
    """FSM states for AI chat"""
    in_chat = State()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ AI-–¥–∏–∞–ª–æ–≥–µ


# ==================== HELPER FUNCTIONS ====================

async def _load_all_user_transactions(user_id: int) -> list:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    try:
        async with get_db_connection() as conn:
            transaction_repo = TransactionRepository(conn)
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–ï–ó –õ–ò–ú–ò–¢–ê
            transactions = await transaction_repo.get_user_transactions(
                user_id=user_id,
                limit=5000
            )
            
            logger.info(f"Loaded ALL {len(transactions)} transactions for user {user_id}")
            
            return transactions or []
            
    except Exception as e:
        logger.error(f"Error loading user transactions: {e}", exc_info=True)
        return []


def _format_all_transactions_context(transactions: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ–ª–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è AI
    –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    
    Args:
        transactions: –°–ø–∏—Å–æ–∫ –í–°–ï–• —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ë–î
        
    Returns:
        –ü–æ–ª–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ –í–°–ï–ú–ò —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    if not transactions:
        return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
    
    total_count = len(transactions)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_income = 0
    total_expense = 0
    
    for t in transactions:
        if t.type == 'income':
            total_income += float(t.amount)
        else:
            total_expense += float(t.amount)
    
    balance = total_income - total_expense
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories_expense = {}
    categories_income = {}
    
    for t in transactions:
        amount = float(t.amount)
        category = t.category_name or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        if t.type == 'expense':
            categories_expense[category] = categories_expense.get(category, 0) + amount
        else:
            categories_income[category] = categories_income.get(category, 0) + amount
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = f"""–ü–û–õ–ù–ê–Ø –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income:,.0f} ‚ÇΩ
- –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:,.0f} ‚ÇΩ
- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} ‚ÇΩ
- –í–°–ï–ì–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_count}

üí∏ –í–°–ï –†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:
"""
    
    # –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    sorted_expenses = sorted(categories_expense.items(), key=lambda x: x[1], reverse=True)
    for category, amount in sorted_expenses:
        count = sum(1 for t in transactions if t.type == 'expense' and (t.category_name or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == category)
        context += f"- {category}: {amount:,.0f} ‚ÇΩ ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
    
    context += f"\nüí∞ –í–°–ï –î–û–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n"
    
    # –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    sorted_income = sorted(categories_income.items(), key=lambda x: x[1], reverse=True)
    for category, amount in sorted_income:
        count = sum(1 for t in transactions if t.type == 'income' and (t.category_name or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") == category)
        context += f"- {category}: {amount:,.0f} ‚ÇΩ ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
    
    # –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    context += f"\nüìù –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –í–°–ï–• {total_count} –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º):\n\n"
    
    for idx, t in enumerate(transactions, 1):
        date_str = t.transaction_date.strftime('%d.%m.%Y') if hasattr(t.transaction_date, 'strftime') else str(t.transaction_date)
        type_emoji = "üí∞" if t.type == 'income' else "üí∏"
        type_name = "–î–æ—Ö–æ–¥" if t.type == 'income' else "–†–∞—Å—Ö–æ–¥"
        
        context += f"{idx}. {type_emoji} {date_str} | {type_name} | {t.category_name} | {t.amount:,.0f} ‚ÇΩ"
        
        if t.description:
            context += f" | {t.description}"
        
        context += "\n"
    
    context += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø AI:
‚úÖ –í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï {total_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è:
   - –ì–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
   - –í—ã—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤
   - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞
   - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
   
üí° –£ —Ç–µ–±—è –µ—Å—Ç—å –ü–û–õ–ù–ê–Ø –∫–∞—Ä—Ç–∏–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!
"""
    
    return context


# ==================== AI CHAT START ====================

@router.callback_query(F.data == "ai_chat_start")
async def start_ai_chat(callback: CallbackQuery, state: FSMContext, db_user):
    """
    Start AI chat session with COMPLETE user's financial context
    –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç AI
    """
    await callback.answer()
    
    try:
        # Set FSM state
        await state.set_state(AIChatStates.in_chat)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"Loading ALL transactions for AI context: user_id={db_user.id}")
        transactions = await _load_all_user_transactions(db_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ –í–°–ï–ú–ò —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        context = _format_all_transactions_context(transactions)
        
        logger.info(
            f"Sending COMPLETE financial context to AI: "
            f"user_id={db_user.id}, total_transactions={len(transactions)}, "
            f"context_length={len(context)} chars"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç AI –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await chat_with_agent(
            user_id=db_user.id,
            message=context,
            new_conversation=True  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        )
        
        # Send welcome message to user
        await callback.message.answer(
            BotMessages.AI_WELCOME,
            reply_markup=ai_end_keyboard()
        )
        
        logger.info(f"AI chat started with FULL context for user {db_user.id}")
        
    except Exception as e:
        logger.error(f"Error starting AI chat: {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ai_chat_keyboard()
        )


# ==================== TEXT MESSAGE HANDLER ====================

@router.message(AIChatStates.in_chat, F.text & ~F.text.startswith('/'))
async def handle_ai_text(message: Message, state: FSMContext, db_user):
    """
    Handle text messages in AI chat mode
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AI –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    try:
        # Show typing indicator
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        user_message = message.text
        logger.info(f"AI text from user {db_user.id}: {user_message[:100]}")
        
        # Get AI response (new_conversation=False - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Å—Å–∏—é)
        ai_response = await chat_with_agent(
            user_id=db_user.id,
            message=user_message,
            new_conversation=False
        )
        
        if ai_response:
            # Send AI response with "End dialog" button
            await message.answer(
                ai_response,
                reply_markup=ai_end_keyboard()
            )
            logger.info(f"AI response sent to user {db_user.id}")
        else:
            await message.answer(
                BotMessages.AI_ERROR,
                reply_markup=ai_end_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in AI text handler: {e}", exc_info=True)
        await message.answer(
            BotMessages.AI_ERROR,
            reply_markup=ai_end_keyboard()
        )


# ==================== VOICE MESSAGE HANDLER ====================

@router.message(AIChatStates.in_chat, F.voice)
async def handle_ai_voice(message: Message, state: FSMContext, db_user):
    """
    Handle voice messages in AI chat mode
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º AI, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    temp_file = None
    temp_path = None
    
    try:
        # Create temp file
        temp_file = tempfile.NamedTemporaryFile(
            suffix='.ogg',
            delete=False,
            dir='/tmp'
        )
        temp_path = temp_file.name
        temp_file.close()
        
        # Download voice file
        success = await download_voice_file(
            bot=message.bot,
            file_id=message.voice.file_id,
            destination=temp_path
        )
        
        if not success:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        # Transcribe voice
        from openai import AsyncOpenAI
        from ai.config import ai_config
        
        # Transcribe with Whisper
        async with AsyncOpenAI(api_key=ai_config.OPENAI_API_KEY) as client:
            with open(temp_path, 'rb') as audio_file:
                transcript = await client.audio.transcriptions.create(
                    model=ai_config.WHISPER_MODEL,
                    file=audio_file,
                    language="ru"
                )
        
        transcribed_text = transcript.text
        logger.info(f"AI voice transcribed for user {db_user.id}: {transcribed_text}")
        
        if not transcribed_text or len(transcribed_text.strip()) < 3:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            return
        
        # Show user's transcribed message
        await processing_msg.edit_text(f"üé§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcribed_text}")
        
        # Show typing
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # Get AI response
        ai_response = await chat_with_agent(
            user_id=db_user.id,
            message=transcribed_text,
            new_conversation=False
        )
        
        if ai_response:
            await message.answer(
                ai_response,
                reply_markup=ai_end_keyboard()
            )
        else:
            await message.answer(
                BotMessages.AI_ERROR,
                reply_markup=ai_end_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in AI voice handler: {e}", exc_info=True)
        await processing_msg.edit_text(BotMessages.AI_ERROR)
    
    finally:
        # Cleanup temp file
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
            except Exception as e:
                logger.error(f"Error deleting temp file: {e}")


# ==================== PHOTO HANDLER ====================

@router.message(AIChatStates.in_chat, F.photo)
async def handle_ai_photo(message: Message, state: FSMContext, db_user):
    """
    Handle photo in AI chat mode
    –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
    """
    processing_msg = await message.answer("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
    
    temp_file = None
    temp_path = None
    
    try:
        # Get largest photo
        photo = message.photo[-1]
        
        # Create temp file
        temp_file = tempfile.NamedTemporaryFile(
            suffix='.jpg',
            delete=False,
            dir='/tmp'
        )
        temp_path = temp_file.name
        temp_file.close()
        
        # Download photo
        success = await download_photo_file(
            bot=message.bot,
            file_id=photo.file_id,
            destination=temp_path
        )
        
        if not success:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
            return
        
        # Process receipt
        receipt_data = await process_receipt_image(temp_path)
        
        if not receipt_data:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —á—ë—Ç–∫–æ."
            )
            return
        
        # Format receipt info for AI
        receipt_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —á–µ–∫:\n"
            f"–°—É–º–º–∞: {receipt_data['amount']} ‚ÇΩ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {receipt_data['description']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {receipt_data['category_name']}\n\n"
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –ø–æ–∫—É–ø–∫—É –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        )
        
        # Show receipt info
        await processing_msg.edit_text(
            f"üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —á–µ–∫:\n\n"
            f"üí∞ –°—É–º–º–∞: {receipt_data['amount']} ‚ÇΩ\n"
            f"üìù {receipt_data['description']}\n"
            f"üìÅ {receipt_data['category_icon']} {receipt_data['category_name']}"
        )
        
        # Show typing
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # Get AI analysis
        ai_response = await chat_with_agent(
            user_id=db_user.id,
            message=receipt_text,
            new_conversation=False
        )
        
        if ai_response:
            await message.answer(
                ai_response,
                reply_markup=ai_end_keyboard()
            )
        else:
            await message.answer(
                BotMessages.AI_ERROR,
                reply_markup=ai_end_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in AI photo handler: {e}", exc_info=True)
        await processing_msg.edit_text(BotMessages.AI_ERROR)
    
    finally:
        # Cleanup
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
            except Exception as e:
                logger.error(f"Error deleting temp file: {e}")


# ==================== DOCUMENT (PDF) HANDLER ====================

@router.message(AIChatStates.in_chat, F.document)
async def handle_ai_document(message: Message, state: FSMContext, db_user):
    """
    Handle PDF documents in AI chat mode
    –ü–∞—Ä—Å–∏–º PDF —á–µ–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
    """
    # Check if PDF
    if not message.document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã.\n"
            "–î–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —á–µ–∫ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=ai_end_keyboard()
        )
        return
    
    processing_msg = await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF...")
    
    temp_file = None
    temp_path = None
    
    try:
        # Check file size
        if message.document.file_size > 20 * 1024 * 1024:
            await processing_msg.edit_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)")
            return
        
        # Create temp file
        temp_file = tempfile.NamedTemporaryFile(
            suffix='.pdf',
            delete=False,
            dir='/tmp'
        )
        temp_path = temp_file.name
        temp_file.close()
        
        # Download PDF
        success = await download_document_file(
            bot=message.bot,
            file_id=message.document.file_id,
            destination=temp_path
        )
        
        if not success:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF")
            return
        
        # Process PDF receipt
        receipt_data = await process_receipt_pdf(temp_path)
        
        if not receipt_data:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫ –≤ PDF.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç."
            )
            return
        
        # Format receipt info for AI
        receipt_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª PDF —á–µ–∫:\n"
            f"–°—É–º–º–∞: {receipt_data['amount']} ‚ÇΩ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {receipt_data['description']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {receipt_data['category_name']}\n\n"
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –ø–æ–∫—É–ø–∫—É –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        )
        
        # Show receipt info
        await processing_msg.edit_text(
            f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π PDF —á–µ–∫:\n\n"
            f"üí∞ –°—É–º–º–∞: {receipt_data['amount']} ‚ÇΩ\n"
            f"üìù {receipt_data['description']}\n"
            f"üìÅ {receipt_data['category_icon']} {receipt_data['category_name']}"
        )
        
        # Show typing
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # Get AI analysis
        ai_response = await chat_with_agent(
            user_id=db_user.id,
            message=receipt_text,
            new_conversation=False
        )
        
        if ai_response:
            await message.answer(
                ai_response,
                reply_markup=ai_end_keyboard()
            )
        else:
            await message.answer(
                BotMessages.AI_ERROR,
                reply_markup=ai_end_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in AI document handler: {e}", exc_info=True)
        await processing_msg.edit_text(BotMessages.AI_ERROR)
    
    finally:
        # Cleanup
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
            except Exception as e:
                logger.error(f"Error deleting temp file: {e}")


# ==================== END AI CHAT ====================

@router.callback_query(F.data == "ai_chat_end")
async def end_ai_chat(callback: CallbackQuery, state: FSMContext, db_user):
    """
    End AI chat session and return to main menu
    –ó–∞–≤–µ—Ä—à–∞–µ–º AI-–¥–∏–∞–ª–æ–≥, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π
    """
    await callback.answer()
    
    # Clear FSM state
    await state.clear()
    
    # Reset AI conversation
    await reset_agent_conversation(db_user.id)
    
    # Send start message WITH AI BUTTON
    await callback.message.answer(
        BotMessages.WELCOME,
        reply_markup=ai_chat_keyboard()  # ‚úÖ –ö–ù–û–ü–ö–ê AI –ü–û–ú–û–©–ù–ò–ö
    )
    
    logger.info(f"AI chat ended for user {db_user.id}")


# ==================== HANDLE /start IN AI CHAT ====================

@router.message(AIChatStates.in_chat, Command("start"))
async def ai_chat_start_command(message: Message, state: FSMContext, db_user):
    """
    Handle /start command while in AI chat
    –ó–∞–≤–µ—Ä—à–∞–µ–º AI-–¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π
    """
    # Clear FSM state
    await state.clear()
    
    # Reset AI conversation
    await reset_agent_conversation(db_user.id)
    
    # Send start message WITH AI BUTTON
    await message.answer(
        BotMessages.WELCOME,
        reply_markup=ai_chat_keyboard()  # ‚úÖ –ö–ù–û–ü–ö–ê AI –ü–û–ú–û–©–ù–ò–ö
    )
    
    logger.info(f"AI chat ended via /start for user {db_user.id}")
