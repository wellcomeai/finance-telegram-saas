# ai/prompts.py
"""
AI Prompts for different tasks
"""

from typing import Dict
from datetime import datetime


class AIPrompts:
    """Промпты для различных задач AI"""
    
    @staticmethod
    def text_parser_prompt(text: str) -> str:
        """
        Промпт для парсинга текста транзакции (поддерживает множественные транзакции)
        """
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        return f"""Ты финансовый ассистент. Твоя задача - извлечь информацию о транзакциях из текста пользователя.

ВАЖНО: Пользователь может описать ОДНУ или НЕСКОЛЬКО транзакций в одном сообщении!

ТЕКСТ ПОЛЬЗОВАТЕЛЯ: "{text}"

ТЕКУЩАЯ ДАТА: {current_date}

ИНСТРУКЦИИ:
1. Внимательно прочитай текст и определи СКОЛЬКО транзакций описано
2. Для КАЖДОЙ транзакции:
   - Определи тип: "income" (доход) или "expense" (расход)
   - Извлеки сумму в рублях (только число)
   - Определи категорию из списка ниже
   - Создай краткое описание (не более 100 символов)
   - Определи дату (если не указана - используй текущую)

КАТЕГОРИИ РАСХОДОВ:
- Продукты (еда, продукты питания, магазин, супермаркет)
- Рестораны и кафе (ресторан, кафе, кофе, обед, ужин)
- Транспорт (такси, метро, автобус, проезд, транспорт)
- Топливо (бензин, заправка, газ, АЗС)
- Жилье (аренда, коммуналка, квартплата, ЖКХ, электричество, вода)
- Покупки (одежда, обувь, техника, электроника, мебель)
- Здоровье и аптека (аптека, лекарства, врач, больница, медицина)
- Образование (курсы, книги, обучение, учеба)
- Развлечения (кино, игры, концерт, театр, хобби)
- Связь и интернет (мобильная связь, интернет, телефон)
- Спорт и фитнес (спортзал, фитнес, тренажерка, йога)
- Путешествия (отель, авиабилеты, путевка, отпуск)
- Подарки (подарок, сувенир)
- Красота и уход (парикмахер, салон, косметика, маникюр)
- Прочее (если не подходит ни одна категория)

КАТЕГОРИИ ДОХОДОВ:
- Зарплата (зарплата, оклад, ЗП)
- Фриланс/Подработка (фриланс, подработка, проект, заказ)
- Подарки/Возвраты (подарок, возврат, вернули)
- Инвестиции (дивиденды, проценты, инвестиции, акции)
- Другие доходы (прочий доход)

ФОРМАТ ОТВЕТА (СТРОГО JSON МАССИВ):
[
    {{
        "type": "income" или "expense",
        "amount": число,
        "category_name": "название категории",
        "description": "краткое описание",
        "date": "YYYY-MM-DD"
    }}
]

ПРИМЕРЫ:

Вход: "Потратил 500 на такси"
Ответ: [
    {{"type": "expense", "amount": 500, "category_name": "Транспорт", "description": "Такси", "date": "{current_date}"}}
]

Вход: "Купил бензин за 2000 и кофе за 200"
Ответ: [
    {{"type": "expense", "amount": 2000, "category_name": "Топливо", "description": "Бензин", "date": "{current_date}"}},
    {{"type": "expense", "amount": 200, "category_name": "Рестораны и кафе", "description": "Кофе", "date": "{current_date}"}}
]

Вход: "Получил зарплату 50000 и фриланс 15000"
Ответ: [
    {{"type": "income", "amount": 50000, "category_name": "Зарплата", "description": "Зарплата", "date": "{current_date}"}},
    {{"type": "income", "amount": 15000, "category_name": "Фриланс/Подработка", "description": "Фриланс", "date": "{current_date}"}}
]

Вход: "Продукты 1500, такси 300, кино 500"
Ответ: [
    {{"type": "expense", "amount": 1500, "category_name": "Продукты", "description": "Покупка продуктов", "date": "{current_date}"}},
    {{"type": "expense", "amount": 300, "category_name": "Транспорт", "description": "Такси", "date": "{current_date}"}},
    {{"type": "expense", "amount": 500, "category_name": "Развлечения", "description": "Кино", "date": "{current_date}"}}
]

ВАЖНО:
- ВСЕГДА отвечай JSON МАССИВОМ, даже если транзакция одна: [{{...}}]
- Если не можешь определить - верни пустой массив: []
- Суммы всегда положительные числа
- Дата в формате YYYY-MM-DD
- НЕ добавляй дополнительный текст, только JSON массив
"""

    @staticmethod
    def categorizer_prompt(description: str, amount: float, transaction_type: str) -> str:
        """
        Промпт для определения категории транзакции
        """
        categories = """
КАТЕГОРИИ РАСХОДОВ:
- Продукты
- Рестораны и кафе
- Транспорт
- Топливо
- Жилье
- Покупки
- Здоровье и аптека
- Образование
- Развлечения
- Связь и интернет
- Спорт и фитнес
- Путешествия
- Подарки
- Красота и уход
- Прочее

КАТЕГОРИИ ДОХОДОВ:
- Зарплата
- Фриланс/Подработка
- Подарки/Возвраты
- Инвестиции
- Другие доходы
"""
        
        return f"""Определи категорию для транзакции.

ТИП: {transaction_type}
СУММА: {amount} ₽
ОПИСАНИЕ: "{description}"

{categories}

Ответь ТОЛЬКО названием категории из списка выше. Без дополнительного текста."""

    @staticmethod
    def image_ocr_prompt() -> str:
        """
        Промпт для распознавания чека на фото
        """
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        return f"""Ты обрабатываешь фото чека из магазина. 

ТЕКУЩАЯ ДАТА: {current_date}

ВАЖНО ПРО ДАТУ:
- Если дата на чеке НЕ ЧИТАЕТСЯ четко - используй текущую дату
- Если дата выглядит ОШИБОЧНОЙ (например, из прошлого года или будущего) - используй текущую дату
- Если сомневаешься в дате - используй текущую дату
- Только если дата ЧЕТКО читается и выглядит актуальной (в пределах последних 7 дней) - используй её

Извлеки следующую информацию:

1. Общая сумма чека
2. Дата покупки (следуй правилам выше!)
3. Название магазина/организации
4. Основные товары/услуги (топ-5 самых дорогих или важных)

ФОРМАТ ОТВЕТА (СТРОГО JSON):
{{
    "amount": число (общая сумма),
    "date": "YYYY-MM-DD",
    "merchant": "название магазина",
    "items": ["товар 1", "товар 2", "товар 3"]
}}

ВАЖНО:
- Если какое-то поле не удалось распознать - используй null
- Сумма всегда положительное число
- Дата в формате YYYY-MM-DD
- Отвечай ТОЛЬКО JSON"""

    @staticmethod
    def pdf_parser_prompt() -> str:
        """
        Промпт для парсинга PDF чека
        """
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        return f"""Ты обрабатываешь PDF чек.

ТЕКУЩАЯ ДАТА: {current_date}

ВАЖНО ПРО ДАТУ:
- Если дата в PDF НЕ ЧИТАЕТСЯ четко - используй текущую дату
- Если дата выглядит ОШИБОЧНОЙ (например, из прошлого года) - используй текущую дату
- Если сомневаешься - используй текущую дату
- Только если дата ЧЕТКО указана и актуальна - используй её

Извлеки следующую информацию:

1. Общая сумма
2. Дата транзакции (следуй правилам выше!)
3. Название организации/магазина
4. Описание покупки или список основных товаров

ФОРМАТ ОТВЕТА (СТРОГО JSON):
{{
    "amount": число,
    "date": "YYYY-MM-DD",
    "merchant": "название",
    "description": "описание покупки"
}}

ВАЖНО:
- Отвечай ТОЛЬКО JSON
- Если поле не найдено - используй null
- Сумма положительное число"""

    @staticmethod
    def voice_context_prompt() -> str:
        """
        Системный промпт для обработки транскрибированного голоса
        """
        return """После транскрипции голосового сообщения обработай текст как обычную текстовую транзакцию.
Пользователь может говорить неформально, с паузами, ошибками - извлеки суть.
Если пользователь упоминает несколько покупок/доходов - распознай их все отдельными транзакциями."""


# Экспортируем единственный экземпляр
prompts = AIPrompts()
